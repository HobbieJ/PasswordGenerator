<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABswksAbMJLAGzCSzpswkt3bMJLeGzC
        S3pswkt8a8JLfnTHUYDE84uG1/6Zitb9mIzV/JiP1fyYkdT8mIzV+p8x0/+GANjywwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbMJLAGzCSwBswktDbMJL3WzC
        S/9swkv/bMJL/2zCS/9swkv/dMZQ/8T0iP/Z/5f/2P+W/9j/lv/Y/5b/2P+W/9f+mM/W+qA11f+IANjz
        vwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGzCSwBswksAbMJLQGzC
        S9tswkv/bMJL/2zCS/9swkv/bMJL/2zCS/90xlD/xPSI/9n/l//Y/5b/2P+W/9j/lv/Y/5b/2P+W/9f+
        mNHW+p831f+FANbzuwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABswksAbMJLAGzC
        Sz5swkvZbMJL/2zCS/9swkv/bMJL/2zCS/9swkv/bMNL/3XHUf/F9In/2v+Y/9j/lv/Y/5b/2P+W/9j/
        lv/Y/5b/2P+W/9f+mNPW+p851v+EANXztwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAbMJLAGzC
        SwBswks7bMJL12zCS/9swkv/bMJL/2zCS/9tw0v/bcRM/2vASv9ltkb/abRI/7Xwev/P/43/1v+U/9r/
        mP/Z/5f/2P+W/9j/lv/Y/5b/2P+W/9f+mNXW+p882P+BANTuuAAAAAAAAAAAAAAAAAAAAAAAAAAAAGzC
        SwBswksAbMJLOWzCS9Vswkv/bMJL/2zCS/9sw0v/bcRM/2OwRP9JgTH/MlUf/yQ6Ff8iPhH/UNcd/2X/
        KP96/z3/oP9g/8j/h//Z/5f/2P+W/9j/lv/Y/5b/2P+W/9f+mNfW+58+2f91ANXxuwAAAAAAAAAAAAAA
        AABswksAbMJLAGzCSzdswkvUbMJL/2zCS/9swkv/bMNL/2q+Sf9KgzH/IzkU/xMdCP8SGQf/EhkH/xYp
        CP8+0w3/Sf8N/0j/Df9L/xD/Yv8m/6D/Yf/T/5L/2f+X/9j/lv/Y/5b/2P+W/9f+mNnV+59A2P9sANbz
        ugAAAAAAbMJLAGzCSwBswks0bMJL0WzCS/9swkv/bMJL/2zDS/9oukj/OmUm/xUgCv8SGgf/ExwI/xMc
        CP8TGwj/FyoI/z/TDv9L/w//Sv8P/0r/D/9I/w7/Tf8S/4f/Sf/Q/47/2f+X/9j/lv/Y/5b/2P+W/9f+
        mNvW+55D2P9ZANb0uQBswksAbMJLMWzCS89swkv/bMJL/2zCS/9swkv/ar9K/zxpJ/8THQj/ExsI/xMc
        CP8THAj/ExwI/xMbCP8XKgj/P9MO/0v/D/9K/w//Sv8P/0r/D/9K/w//Sv8P/4n/S//V/5P/2P+W/9j/
        lv/Y/5b/2P+W/9f+l93T+Zs71/2aAGzCSwBswkuVbMJL/2zCS/9swkv/bMJL/23ETP9Qjjb/FyML/xMb
        CP8THAj/ExwI/xMcCP8THAj/ExsI/xcqCP8/0w7/S/8P/0r/D/9K/w//Sv8P/0r/D/9J/w7/T/8U/6n/
        af/a/5j/2P+W/9j/lv/Y/5b/2P+W/9H6lH3c/5UAbMJLAGzCS5xswkv/bMJL/2zCS/9sw0v/aLpI/ytJ
        Gv8SGgf/ExwI/xMcCP8THAj/ExwI/xMcCP8TGwj/FyoI/z/TDv9L/w//Sv8P/0r/D/9K/w//Sv8P/0r/
        D/9I/w3/bv8x/9D/j//Z/5b/2P+W/9j/lv/Y/5b/0fuTf9z/lQBswksAbMJLmmzCS/9swkv/bMJL/23E
        TP9YnDz/FiML/xEYB/8RGQf/ERkH/xEZB/8RGQf/ERkH/xEYB/8VKAf/PdMM/0n/Df9I/w3/SP8N/0j/
        Df9I/w3/SP8N/0j/Df9P/xT/tf91/9r/mP/Y/5b/2P+W/9j/lv/S+5OA3f+WAGzCSwBswkuYbMJL/2zC
        S/9swkv/bcRM/1icPP8zWCD/M1gg/zNYIP8zWCD/M1gg/zNYIP8zWCD/M1cg/zhjIv9v3zr/fv9A/33/
        QP99/0D/ff9A/33/QP99/0D/ff9A/33/QP+2/3X/2v+X/9j/lv/Y/5b/2P+W/9L7k4Li/5oAb8ZPAG3C
        TJZtw0z/bcNM/23DTP9tw0z/bcJL/23CS/9twkv/bcJL/23CS/9twkv/bcJL/23CS/9twkv/dcZQ/8T0
        iP/Z/5f/2P+W/9j/lv/Y/5b/2P+W/9j/lv/Y/5b/2P+W/9j/lv/Z/5f/2f+X/9n/l//Z/5f/0/yUhOn/
        nwA/qi0AYbxDlF26Qf9dukH/XbpB/126Qf9dukH/XbpB/126Qf9dukH/XbpB/126Qf9dukH/XbpB/1y6
        Qf9lv0f/tex+/8n3jP/I9ov/yPaL/8j2i//I9ov/yPaL/8j2i//I9ov/yPaL/8j2i//I9ov/yPaL/8j2
        i//D84mG2/+UAAA2AAAimBeSDYwJ/wyMCP8MjAj/DIwI/wyMCP8MjAj/DIwI/wyMCP8MjAj/DIwI/wyM
        CP8MjAj/C4wH/xiTEf9pwEn/eMlU/3fIU/93yFP/d8hT/3fIU/93yFP/d8hT/3fIU/93yFP/d8hT/3fI
        U/93yFP/d8hT/3bIU4d5yVQAADUAABiTEZEBhgH/AIUA/wCFAP8AhQD/AIUA/wCFAP8AhQD/AIUA/wCF
        AP8AhQD/AIUA/wCGAP8AhQD/DYwJ/126Qf9swkz/bMNL/2zDS/9rwkv/a8JL/2zDS/9sw0v/a8JL/2vC
        S/9rwkv/a8JL/2vCS/9rwkv/a8JLiGvCSwAAQgAAGZMRjwGGAf8AhQD/AIUA/wCFAP8AhQD/AH8A/wBK
        AP8AbwD/AIcA/wB+AP8ASQD/AHEA/wCGAP8NjAn/XrpB/27ETP9QkDj/Q3cu/2vBS/9txEz/Tow2/0V7
        L/9rwUv/bMJL/2zCS/9swkv/bMJL/2zCS/9swkuKbMJLAABOAAAZkxGNAYYB/wCFAP8AhQD/AIUA/wCF
        AP8AgAD/ACsA/wApAP8AfQD/AEgA/wAVAP8AbwD/AIYA/w2MCf9eukH/bsVM/0qFNP8NGAn/TYo1/1yl
        QP8TIg3/N2Im/2zCS/9swkv/bMJL/2zCS/9swkv/bMJL/2zCS4xswksAAFcAABmTEosBhgH/AIUA/wCF
        AP8AhQD/AIUA/wCHAP8AbQD/ABQA/wAoAP8AEAD/AFEA/wCHAP8AhQD/DYwJ/166Qf9tw0z/a8BK/y5S
        IP8SIQ3/GzAT/xwyE/9ktEb/bcNL/2zCS/9swkv/bMJL/2zCS/9swkv/bMJLjmzCSwAAYQAAG5UTiAKG
        Af8AhQD/AIUA/wCFAP8AhQD/AIMA/wBsAP8AIAD/AAAA/wAMAP8AWQD/AH8A/wCFAP8NjAn/XrpB/23D
        TP9ks0X/Omgo/wMFAv8AAAD/Kksd/1+qQv9rwUr/bMJL/2zCS/9swkv/bMJL/2zCS/9swkuLbMJLABOQ
        DQAvoCFJDo0K5wCFAP8AhQD/AIUA/wCBAP8APQD/ABIA/wAWAP8ABQD/ABMA/wARAP8AJwD/AHMA/w2N
        Cf9fvEL/UpI5/xcpEP8PHAv/DBUI/wcNBf8RHwz/ER8M/0F1Lf9sw0v/bMJL/2zCS/9swkv/bMJL1GzC
        SzRswksAa8BMAP///wAvnyFSDo0K5QCFAP8AhQD/AIMA/wBYAP8AYgD/AG0A/wATAP8AVQD/AG0A/wBS
        AP8AeQD/DY0J/1+8Qv9boj//RHov/16oQf8wVyH/HDMU/16pQv9IgjL/UJA4/2zDS/9swkv/bMJL/2zC
        S9Zswks6bMJLAGzCSwAAAAAAa8BNAP///wAwoCFQD40K5ACFAP8AhQD/AIYA/wCHAP8AegD/ABkA/wBe
        AP8AiQD/AIcA/wCFAP8NjAn/XrpB/23DTP9uxUz/b8dN/zdjJv8iPhj/a8FL/27FTP9txEz/bMJL/2zC
        S/9swkvYbMJLPGzCSwBswksAAAAAAAAAAAAAAAAAbsJPAAAAAAAxoCJND40K4gCFAP8AhQD/AIUA/wB/
        AP8ARAD/AG8A/wCGAP8AhQD/AIUA/w2MCf9eukH/bcJM/2zCS/9txEz/TYs1/0BzLP9swUv/bMJL/2zC
        S/9swkv/bMJL2mzCSz9swksAbMJLAAAAAAAAAAAAAAAAAAAAAAAAAAAAbcJLAAAAAAAxoSJKD44L4ACF
        AP8AhQD/AIUA/wCFAP8AhQD/AIUA/wCFAP8AhQD/DYwJ/166Qf9twkz/bMJL/2zCS/9swkv/bMJL/2zC
        S/9swkv/bMJL/2zCS9xswktBbMJLAGzCSwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAccROAAAA
        AAAyoSNIEI4L3gCFAP8AhQD/AIUA/wCFAP8AhQD/AIUA/wCFAP8NjAn/XrpB/23CTP9swkv/bMJL/2zC
        S/9swkv/bMJL/2zCS/9swkvebMJLRGzCSwBswksAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAd8hTAAAVAAAzoiNFEI4L3QGFAP8AhQD/AIUA/wCFAP8AhQD/AIUA/w2MCf9eukH/bcJM/2zC
        S/9swkv/bMJL/2zCS/9swkv/bMJL32zCS0ZswksAbMJLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAfcpXAAA+AAA0oiRCEY8M2wKFAP8BhQD/AYUA/wGFAP8AhQD/Do0K/166
        Qv9twkz/bMJL/2zCS/9swkv/bMJL/2zCS+FswktJbMJLAGzCSwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf8lcAABGAAAzoiQ+HZUUnRqTEqEalBKeGpQSnRqU
        EpslmRqZYrxEl23CS5VswkuTbMJLkWzCS49swkuNbMJLQ2zCSwBswksAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////AP///wD///8B////Af//
        /wD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//////+AAf//AAD//gAAf/wAAD/4AAAf8AAAD+AAAAfAAAADgAAAAYAA
        AAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAGAAAABgAAAAYAAAAHAAAAD4AAAB/AA
        AA/4AAAf/AAAP/4AAH//AAD//4AB///P//8=
</value>
  </data>
</root>